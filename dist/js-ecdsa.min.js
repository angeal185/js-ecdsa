const ecdsa={u82str:function(STR){let str=''
for(var i=0;i<STR.byteLength;i++){str+=String.fromCharCode(STR[i])}
return str;},str2u8:function(string){let arrayBuffer=new ArrayBuffer(string.length*1);let newUint=new Uint8Array(arrayBuffer);newUint.forEach((_,i)=>{newUint[i]=string.charCodeAt(i);});return newUint;},a2h:function(byteArray){return Array.prototype.map.call(byteArray,function(byte){return('0'+(byte&0xFF).toString(16)).slice(-2);}).join('');},h2a:function(hexString){var result=[];for(var i=0;i<hexString.length;i+=2){result.push(parseInt(hexString.substr(i,2),16));}
return result;},gen:function(curve,cb){window.crypto.subtle.generateKey({name:"ECDSA",namedCurve:'P-'+curve},true,["sign","verify"]).then(function(key){let obj={};window.crypto.subtle.exportKey("jwk",key.publicKey).then(function(kd){obj.public=kd
window.crypto.subtle.exportKey("jwk",key.privateKey).then(function(kd){obj.private=kd;cb(false,obj)}).catch(function(err){cb(err);});}).catch(function(err){cb(err);});}).catch(function(err){cb(err);});},sign:function(key,data,digest,cb){window.crypto.subtle.importKey("jwk",key,{name:"ECDSA",namedCurve:key.crv},true,["sign"]).then(function(i){window.crypto.subtle.sign({name:"ECDSA",hash:{name:"SHA-"+digest}},i,ecdsa.str2u8(data)).then(function(signature){let sig=ecdsa.a2h(new Uint8Array(signature));cb(false,sig);}).catch(function(err){cb(err);});}).catch(function(err){cb(err);});},verify:function(key,sig,data,digest,cb){window.crypto.subtle.importKey("jwk",key,{name:"ECDSA",namedCurve:key.crv},true,["verify"]).then(function(i){window.crypto.subtle.verify({name:"ECDSA",hash:{name:"SHA-"+digest}},i,new Uint8Array(ecdsa.h2a(sig)),ecdsa.str2u8(data)).then(function(isvalid){cb(false,isvalid)}).catch(function(err){cb(err);});}).catch(function(err){cb(err);});}}
